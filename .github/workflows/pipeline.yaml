name: Python Greetings CI/CD Pipeline

on:
  push:
    branches:
      - main
    workflow_dispatch:

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
    steps:
      - name: List files for debugging
        run: ls

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_NAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push Docker image
        run: |
            docker build -t ${{ secrets.DOCKERHUB_NAME }}/python-greetings-app:latest .
            docker push ${{ secrets.DOCKERHUB_NAME }}/python-greetings-app:latest

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Print information
        run: echo "Deploying Python microservice to DEV environment..."
  
      - name: Pull latest Docker image from DockerHub
        run: docker pull ${{ secrets.DOCKERHUB_NAME }}/python-greetings-app:latest
  
      - name: Stop docker service greetings-app-dev
        run: docker-compose -f docker-compose.yml stop greetings-app-dev
  
      - name: Remove docker service greetings-app-dev
        run: docker-compose -f docker-compose.yml rm -f greetings-app-dev
  
      - name: Create (up) docker service greetings-app-dev
        run: docker-compose -f docker-compose.yml up -d greetings-app-dev

      - name: docker ps
        run: docker ps -a


  tests-on-dev:
    runs-on: ubuntu-latest
    needs: deploy-to-dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 

      - name: Testing on DEV environment
        run: |
          docker ps -a
          echo "Running tests on DEV environment.."
          docker pull ${{ secrets.DOCKERHUB_NAME }}/api-tests:latest
          ls
          docker run --network='http://127.0.0.1:7001' --rm ${{ secrets.DOCKERHUB_NAME }}/api-tests:latest run greetings greetings-app-dev
          

  # tests-on-dev:
  #   runs-on: ubuntu-latest
  #   needs: deploy-to-dev
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3      
        
  #     - name: Pull latest Docker image from DockerHub
  #       run: docker pull ${{ secrets.DOCKERHUB_NAME }}/api-tests:latest

  #     - name: Running tests on DEV environment...
  #       run: docker run --rm ${{ secrets.DOCKERHUB_NAME }}/api-tests:latest run greetings greetings-app-dev

  deploy-to-stg:
    runs-on: ubuntu-latest
    needs: tests-on-dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploying Python microservice to STG environment...
        run: |
          docker pull ${{ secrets.DOCKERHUB_NAME }}/python-greetings-app:latest
          docker-compose -f docker-compose.yml stop greetings-app-stg
          docker-compose -f docker-compose.yml rm -f greetings-app-stg
          docker-compose -f docker-compose.yml up -d greetings-app-stg

  tests-on-stg:
    runs-on: ubuntu-latest
    needs: deploy-to-stg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Running tests on STG environment...
        run: docker run --network=host --rm ${{ secrets.DOCKERHUB_NAME }}/api-tests:latest run greetings greetings_stg

  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: tests-on-stg
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploying Python microservice to PROD environment...
        run: |
          docker pull ${{ secrets.DOCKERHUB_NAME }}/python-greetings-app:latest
          docker-compose -f docker-compose.yml stop greetings-app-prod
          docker-compose -f docker-compose.yml rm -f greetings-app-prod
          docker-compose -f docker-compose.yml up -d greetings-app-prod

  tests-on-prod:
    runs-on: ubuntu-latest
    needs: deploy-to-prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Running tests on PROD environment...
        run: docker run --network=host --rm ${{ secrets.DOCKERHUB_NAME }}/api-tests:latest run greetings greetings_prod
